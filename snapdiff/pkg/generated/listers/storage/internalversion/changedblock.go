/*
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package internalversion

import (
	storage "github.com/ihcsim/controllers/snapdiff/pkg/apis/storage"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ChangedBlockLister helps list ChangedBlocks.
// All objects returned here must be treated as read-only.
type ChangedBlockLister interface {
	// List lists all ChangedBlocks in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storage.ChangedBlock, err error)
	// ChangedBlocks returns an object that can list and get ChangedBlocks.
	ChangedBlocks(namespace string) ChangedBlockNamespaceLister
	ChangedBlockListerExpansion
}

// changedBlockLister implements the ChangedBlockLister interface.
type changedBlockLister struct {
	indexer cache.Indexer
}

// NewChangedBlockLister returns a new ChangedBlockLister.
func NewChangedBlockLister(indexer cache.Indexer) ChangedBlockLister {
	return &changedBlockLister{indexer: indexer}
}

// List lists all ChangedBlocks in the indexer.
func (s *changedBlockLister) List(selector labels.Selector) (ret []*storage.ChangedBlock, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*storage.ChangedBlock))
	})
	return ret, err
}

// ChangedBlocks returns an object that can list and get ChangedBlocks.
func (s *changedBlockLister) ChangedBlocks(namespace string) ChangedBlockNamespaceLister {
	return changedBlockNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ChangedBlockNamespaceLister helps list and get ChangedBlocks.
// All objects returned here must be treated as read-only.
type ChangedBlockNamespaceLister interface {
	// List lists all ChangedBlocks in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*storage.ChangedBlock, err error)
	// Get retrieves the ChangedBlock from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*storage.ChangedBlock, error)
	ChangedBlockNamespaceListerExpansion
}

// changedBlockNamespaceLister implements the ChangedBlockNamespaceLister
// interface.
type changedBlockNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ChangedBlocks in the indexer for a given namespace.
func (s changedBlockNamespaceLister) List(selector labels.Selector) (ret []*storage.ChangedBlock, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*storage.ChangedBlock))
	})
	return ret, err
}

// Get retrieves the ChangedBlock from the indexer for a given namespace and name.
func (s changedBlockNamespaceLister) Get(name string) (*storage.ChangedBlock, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(storage.Resource("changedblock"), name)
	}
	return obj.(*storage.ChangedBlock), nil
}
