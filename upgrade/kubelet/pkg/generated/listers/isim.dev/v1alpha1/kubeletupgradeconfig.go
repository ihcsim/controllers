/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/controllers/upgrade/kubelet/pkg/apis/isim.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeletUpgradeConfigLister helps list KubeletUpgradeConfigs.
// All objects returned here must be treated as read-only.
type KubeletUpgradeConfigLister interface {
	// List lists all KubeletUpgradeConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgradeConfig, err error)
	// KubeletUpgradeConfigs returns an object that can list and get KubeletUpgradeConfigs.
	KubeletUpgradeConfigs(namespace string) KubeletUpgradeConfigNamespaceLister
	KubeletUpgradeConfigListerExpansion
}

// kubeletUpgradeConfigLister implements the KubeletUpgradeConfigLister interface.
type kubeletUpgradeConfigLister struct {
	indexer cache.Indexer
}

// NewKubeletUpgradeConfigLister returns a new KubeletUpgradeConfigLister.
func NewKubeletUpgradeConfigLister(indexer cache.Indexer) KubeletUpgradeConfigLister {
	return &kubeletUpgradeConfigLister{indexer: indexer}
}

// List lists all KubeletUpgradeConfigs in the indexer.
func (s *kubeletUpgradeConfigLister) List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgradeConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubeletUpgradeConfig))
	})
	return ret, err
}

// KubeletUpgradeConfigs returns an object that can list and get KubeletUpgradeConfigs.
func (s *kubeletUpgradeConfigLister) KubeletUpgradeConfigs(namespace string) KubeletUpgradeConfigNamespaceLister {
	return kubeletUpgradeConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeletUpgradeConfigNamespaceLister helps list and get KubeletUpgradeConfigs.
// All objects returned here must be treated as read-only.
type KubeletUpgradeConfigNamespaceLister interface {
	// List lists all KubeletUpgradeConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgradeConfig, err error)
	// Get retrieves the KubeletUpgradeConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KubeletUpgradeConfig, error)
	KubeletUpgradeConfigNamespaceListerExpansion
}

// kubeletUpgradeConfigNamespaceLister implements the KubeletUpgradeConfigNamespaceLister
// interface.
type kubeletUpgradeConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeletUpgradeConfigs in the indexer for a given namespace.
func (s kubeletUpgradeConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgradeConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubeletUpgradeConfig))
	})
	return ret, err
}

// Get retrieves the KubeletUpgradeConfig from the indexer for a given namespace and name.
func (s kubeletUpgradeConfigNamespaceLister) Get(name string) (*v1alpha1.KubeletUpgradeConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kubeletupgradeconfig"), name)
	}
	return obj.(*v1alpha1.KubeletUpgradeConfig), nil
}
