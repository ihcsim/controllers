/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/ihcsim/controllers/upgrade/kubelet/pkg/apis/clusterop.isim.dev/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// KubeletUpgradeLister helps list KubeletUpgrades.
// All objects returned here must be treated as read-only.
type KubeletUpgradeLister interface {
	// List lists all KubeletUpgrades in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgrade, err error)
	// KubeletUpgrades returns an object that can list and get KubeletUpgrades.
	KubeletUpgrades(namespace string) KubeletUpgradeNamespaceLister
	KubeletUpgradeListerExpansion
}

// kubeletUpgradeLister implements the KubeletUpgradeLister interface.
type kubeletUpgradeLister struct {
	indexer cache.Indexer
}

// NewKubeletUpgradeLister returns a new KubeletUpgradeLister.
func NewKubeletUpgradeLister(indexer cache.Indexer) KubeletUpgradeLister {
	return &kubeletUpgradeLister{indexer: indexer}
}

// List lists all KubeletUpgrades in the indexer.
func (s *kubeletUpgradeLister) List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgrade, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubeletUpgrade))
	})
	return ret, err
}

// KubeletUpgrades returns an object that can list and get KubeletUpgrades.
func (s *kubeletUpgradeLister) KubeletUpgrades(namespace string) KubeletUpgradeNamespaceLister {
	return kubeletUpgradeNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// KubeletUpgradeNamespaceLister helps list and get KubeletUpgrades.
// All objects returned here must be treated as read-only.
type KubeletUpgradeNamespaceLister interface {
	// List lists all KubeletUpgrades in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgrade, err error)
	// Get retrieves the KubeletUpgrade from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.KubeletUpgrade, error)
	KubeletUpgradeNamespaceListerExpansion
}

// kubeletUpgradeNamespaceLister implements the KubeletUpgradeNamespaceLister
// interface.
type kubeletUpgradeNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all KubeletUpgrades in the indexer for a given namespace.
func (s kubeletUpgradeNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.KubeletUpgrade, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.KubeletUpgrade))
	})
	return ret, err
}

// Get retrieves the KubeletUpgrade from the indexer for a given namespace and name.
func (s kubeletUpgradeNamespaceLister) Get(name string) (*v1alpha1.KubeletUpgrade, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("kubeletupgrade"), name)
	}
	return obj.(*v1alpha1.KubeletUpgrade), nil
}
